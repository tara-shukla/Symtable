Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Tara Shukla

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such documents include the course's lecture slides and precept handouts.

The course's textbooks.

The course's current staff members outside of class time through office hours.

The course's current staff members outside of class time through Ed.


------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None.

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

I liked it! Provided good learning for hashing, pointer to pointer, 
and void poitners.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

n/a

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None.


------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: lines 85, 117: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 199: medium priority:
   Do you want to validate 'pvExtra' through an assert?

pvValue and pvExtra are both void pointers that are never dereferenced. 
It is ok for them to be null, so the warning is invalid.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None.


------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablehash.c: line 221,172: medium priority:
   Do you want to validate 'pvValue' through an assert?

symtablehash.c: line 310: medium priority:
   Do you want to validate 'pvExtra' through an assert?

pvValue is a void pointer that is never dereferenced. 
It is ok for it to be null, so the warning is invalid.


------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.003058 seconds.
-- 5000 bindings consumed 1.221041 seconds.
-- 50000 bindings consumed 120.859562 seconds.
-- 500000 bindings consumed (more than 5 mins) seconds.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.014010 seconds.
-- 50000 bindings consumed 0.371188 seconds.
-- 500000 bindings consumed 76.366513 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.009202 seconds.
-- 50000 bindings consumed 0.144241 seconds.
-- 500000 bindings consumed 1.679748 seconds.
